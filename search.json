[{"title":"Mysql索引&事务&联接","url":"/2025/05/02/A1-%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E7%B4%A2%E5%BC%95%E4%BA%8B%E5%8A%A1%E8%81%94%E6%8E%A5/","content":"InnoDB索引\n支持 事务、外键、行锁\n聚簇索引，叶子节点data域存行记录\n\nInnoDB采用 MVCC方式支持高并发，实现四个标准隔离级别(未提交读、已提交读、可重复读-默认、可串行化)。\n\n\n\n\n\n\n\n\nMyIsam索引\n不支持 事务，外键，行锁；   \n非聚簇索引，叶子节点data域中存引用地址；\n\n\n\n索引优缺点索引优点\n提高数据查询效率，降低数据库 IO成本；\n被索引的列会自动排序，包括单列索引&amp;组合索引，按照索引列排序，order by语句效率更高；\n\n索引缺点\n索引会占磁盘空间；\n索引会降低更新表的效率，每次对表增删改，不仅要更新数据，还要更新对应的索引；\n\n索引结构Hash :  不适合范围查找；无法用于排序与分组；\n二叉树：根节点的取值，容易导致 二叉树不分叉，降低查询效率；\n平衡二叉树：不支持 范围查询，范围查询时需要从根节点多次遍历，效率低；\nB树：\nB树不支持范围查询，在非叶子节点中也保存数据记录；\n每个节点的 data域存储 行记录，行的大小随着列数的增多而变大，这时页中可存储的数据量会变少，树结构会变高，磁盘IO次数就会变多；\n\nB+树结构：\n支持范围查询，只在叶子节点data域中存数据；且主键具备唯一性，不需再向后查找，&lt;&#x3D;终止；\nIO读取一页（默认16K）数据，数据存储在磁盘中，查询数据时，需要先把 磁盘中的数据加载到内存，磁盘IO操作很耗时，所以优化重点就是 尽量减少磁盘 IO 操作。B+树在非叶子中仅保存索引（不保存数据），相比B树存储同样多的数据，树的高度会更低，从而减少磁盘IO；\n\n各种索引主键索引主键索引 &#x3D;&#x3D; 聚簇索引，当一个表没有创建主键索引时，InnoDB会自动构建聚簇索引。\n\n在表上定义 主键 PRIMARY KEY，InnoDB 将 主键索引用作聚簇索引；                                                     \n如果表没有定义主键，InnoDB会选择 第一个不为NULL的唯一索引列  用作聚簇索引；\n以上两个都没有，会使用一个 6 字节长整型字段构建聚簇索引，该 ROWID字段会在插入新行时自动递增；\n\n辅助索引聚簇索引之外的所有其他索引。\n索引查询过程：非主键索引（辅助索引）的其他索引查询，需要先根据辅助索引B+树找到叶子节点data域中存储的主键索引，再根据主键索引找到实际数据。\n\n\n前缀索引定义字符串的一部分作为索引，如果创建索引的语句不指定前缀长度，索引默认包含整个字符串。\n优点：定义好长度可以做到节省空间，又不用额外增加太多的查询成本。\n注意：有前缀索引的联合索引一定会回表，虽然联合索引已包含相关信息，但还是会回表，因为有前缀索引，不确定到底是不是一个完整的信息。例如： www.aobing@mogu.com 一个完整的邮箱去查询，但无法判断后续是否有数据，不知道是否是完整的数据，所以需要回表去判断。\n联合索引联合索引设计原则\n频繁使用的列、区分度高的列放在前面；\n范围查询的列放在复合索引的最后面，例如 idx_status_create_time；\n将常需要作为 查询返回的字段，增加到联合索引中，通过联合索引上增加字段来使用覆盖索引；\n\n联合索引优势1.减少开销： 建联合索引(col1,col2,col3)，实际相当于建 (col1),(col1,col2),(col1,col2,col3)三个索引,每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引可以有效的减少开销！\n2.覆盖索引：联合索引通过遍历索引取得数据，无需回表，减少io操作，提升性能；\n3.效率高： 索引列越多，通过索引筛选出的数据越少。\n例如：有1000W条数据的表，有如下sql：select from table where col1&#x3D;1 and col2&#x3D;2 and col3&#x3D;3, 假设每个条件可以筛选出10%数据，如果只有单值索引，那么通过该索引能筛选出1000W10%&#x3D;100w条数据，然后再回表从 100w条数据中找到符合col2&#x3D;2 and col3&#x3D; 3的数据，然后再排序，再分页；\n如果是联合索引，通过索引筛选出1000w10% 10% *10%&#x3D;1w，效率明显提升。\n联合索引查询过程\n覆盖索引由多个字段组合成的联合索引，如：idx_abc(a,b,c)索引，在查询时，如果只需要 abc字段，则查询到联合索引的叶子节点就可以直接返回，不需要回表。\n注：Mysql优化器会根据联合索引字段位置，调整where 后边的查询条件，让其满足索引顺序。\n示例：创建 idx_abc(a,b,c)索引，相当于创建 (a)、（a,b）（a,b,c）三个索引，节省空间。在执行sql时，优化器会调整where后a,b,c的顺序，让其用上索引。\nSELECT * FROM table WHERE a IN (1,2,3) and b &gt; 1; 还是对(a，b)建立索引，因为 IN可视为等值引用，不会中止索引匹配，所以还是(a,b)SELECT * FROM table WHERE a &gt; 1 and b = 2 and c &gt; 3; (b,a)或者(b,c)都可以，要结合具体情况具体分析。select * from t where a=1 and b=1 and c =1;  #这样可以利用到定义的索引（a,b,c）,用上a,b,c select * from t where a=1 and b=1;           #这样可以利用到定义的索引（a,b,c）,用上a,b select * from t where b=1 and a=1;     #这样可以利用到定义的索引（a,b,c）,用上a,b（mysql有查询优化器） select * from t where a=1;             #这样也可以利用到定义的索引（a,b,c）,用上a select * from t where b=1 and c=1;     #这样不可以利用到定义的索引（a,b,c）； 最左 a 不匹配select * from t where a=1 and c=1;     #这样可以利用到定义的索引（a,b,c），但只用上a索引，b,c索引用不到 \n\n\n\n最左匹配原则\n联合索引查询时，Mysql一直向右匹配，直至遇到范围查询 ( &gt;、&lt;、between、like ) 停止匹配。推荐使用联合索引替代多个单列索引使用。\n联合索引只有先确定前一个（左侧的值）后，才能确定下一个值。如果有范围查询，联合索引中使用范围查询的字段后的索引在该条 SQL 中都不会起作用。\n注意：in 和 &#x3D;  都可以乱序，比如有索引（a,b,c），语句 select * from t where c &#x3D;1 and a&#x3D;1 and b&#x3D;1，这样的语句也可以用到最左匹配，因为 MySQL优化器会分析 SQL 语句，将其优化成索引可以匹配的形式，即 select * from t where a &#x3D;1 and a&#x3D;1 and c&#x3D;1。\n\n索引设置建议\n尽量保持自增；\n差异性大的字段；\n出现频率高的字段，或常在where条件中出现的字段；\n小字段（减少所占用的空间）；\n\n破坏索引方式1.索引列 有函数运算\n2.索引列 有  !&#x3D;   &lt;&gt;    not in    not exist \n3.like 条件使索引生效，like后不能以%开头， like %字段名%、like %字段名 这类语句会使索引失效；\n4.字符型索引列；  \n5.隐式类型转换；\n示例：select * from t where id &#x3D; 1; 如果 id 是字符类型的，1是数字类型的，Mysql底层会对 比较进行转换，相当于加了 cast( id AS signed int ) 这样的函数，函数会导致走不上索引。 \n示例：FROM_UNIXTIME(create_time) &#x3D; ‘2016-06-06’ ，不会使用索引，B+树中存储的都是数据表中的字段值，但是进行检索时，需要把所有元素都应用函数才能比较；\n优化：create_time &#x3D; UNIX_TIMESTAMP(‘2016-06-06’)；\n","categories":["Mysql","索引"],"tags":["Mysql"]},{"title":"学习方法论","url":"/2025/05/02/%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA/","content":"深度 – 链式学习法从一个技术点出发，不断的输入挖掘，不断的下探一步，问问自己为什么？\n宽度 – 比较学习法类似技术选项的调研，当前市面上还有哪些其他类型的技术，横向对比。\n\n\n5W1H方法what：问题的类型及标准&amp;依据\nwho：问题的主题是谁\nwhich：问题的具体表现&amp;特定的状况（定向描述）\nwhere：问题的空间范围&amp;特定领域\nwhen：问题的时间范围\nhow：问题到了何种程度（怎样、多少…定量描述）\n个人写作模板1.问题是什么？（背景）\n2.当前现状？\n3.预期效果？\n4.面临的挑战？\n5.拆分问题？（分治–实现细节）\n6.横向方案对比？\n7.复盘总结（优点、缺点、后续改进）\n时间管理精力专注1.抵制手机诱惑，固定时间看手机\n2.番茄工作法\n3.工作时间高度专注\n固定深造1.工作日：早起1h、晚睡1h\n2.周末时间选择\n3.通勤时间利用\n沉淀总结1.浅尝即止是大忌：为啥这么写，这么写有啥好处，有啥坏处，多问自己几个为什么?\n2.保持好奇心：勤于在项目中发现问题，挖掘问题，多思考（深度、宽度）。\n","categories":["学习","学习方法论"],"tags":["方法论"]},{"title":"职场工作","url":"/2025/05/02/%E6%96%B9%E6%B3%95%E8%AE%BA/%E8%81%8C%E5%9C%BA%E6%B1%87%E6%8A%A5%E6%96%B9%E6%B3%95%E8%AE%BA/","content":"接受工作–只问标准*具体化\n*可衡量\n*可实现\n*相关性\n*有时限\n\n\n请示工作–必带方案*风险\n*利益\n*差异\n*影响\n汇报工作–突出结果*结论先行\n*再讲理由\n*拿出事例\n*重述结论\n分享工作–细说流程*What：产品背景\n*Who：目标人群\n*Why：预期目标\n*Where：使用场景\n*When：需求节点\n*How：如何验证\n*How much：多少资源\n复盘工作–总结SOP*回顾目标\n*评估结果，数据验证\n*分析成功、失败原因，表层&#x2F;深层原因\n*总结方法论\n","categories":["学习","职场汇报方法论"],"tags":["方法论"]}]